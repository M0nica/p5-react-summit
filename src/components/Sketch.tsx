import { type P5CanvasInstance, type Sketch } from '@p5-wrapper/react';
import { lightBg } from './utils.ts';
import {
  type MySketchProps,
  type Shape,
  type UserInputValues,
} from './types.ts';
import { defaultInputValues } from './Demo';
import { convertStringToSeedNumber, computeCanvasDimensions } from './utils.ts';

let ORIGINAL_TILE_SIZE = 100;

function drawBanner(
  p5: P5CanvasInstance,
  width: number,
  inputValues: UserInputValues
) {
  let BASE_SIZE = 35;
  const { colors, name } = inputValues;
  const { fromColor, toColor, bgColor } = colors;
  p5.textSize(width > 750 ? BASE_SIZE * 0.5 : BASE_SIZE * 0.45);

  // draw a rectangle at top of canvas
  p5.noStroke();
  p5.fill(colors.fromColor);
  p5.rect(0, 0, width, BASE_SIZE);

  // write the name in the rectangle
  p5.fill(bgColor);
  p5.textAlign(p5.CENTER, p5.CENTER);
  p5.text(
    `${
      name ? `Generated by ${name} at` : `Sketching with Code at`
    } React Summit 2024`,
    width / 2,
    BASE_SIZE * 0.5
  );

  //draw circles to represent the main colors used to generate the color palette
  if (width > 600) {
    p5.stroke(lightBg);
    [fromColor, toColor, bgColor].forEach((color, index) => {
      p5.fill(color);
      p5.circle(
        width - (index + 1) * BASE_SIZE,
        BASE_SIZE / 2,
        BASE_SIZE * 0.5
      );
    });
  }
}
function drawTiles(
  p5: P5CanvasInstance,
  width: number,
  height: number,
  inputValues: UserInputValues
) {
  const { colors, patternMode, showGridLines, size, artMode } = inputValues;
  const { fromColor, toColor } = colors;

  const from = p5.color(fromColor);
  const to = p5.color(toColor);

  const tile = generateTile(p5, showGridLines, artMode);

  for (var column = 1; column <= width + size; column += size) {
    for (var row = 1; row <= height + size; row += size) {
      p5.push();
      p5.translate(column, row);
      var angle = (p5.TWO_PI * p5.int(p5.random(1, 5))) / 4;
      p5.rotate(angle);
      p5.tint(
        p5.lerpColor(
          from,
          to,
          patternMode === 'gradient' ? row / height : p5.random(1)
        )
      );

      p5.scale(size / ORIGINAL_TILE_SIZE);
      p5.image(tile, 0, 0);
      p5.pop();
    }
  }
}

function generateTile(
  p5: P5CanvasInstance,
  showGridLines: boolean,
  artMode: Shape
) {
  const BASE_WEIGHT = 16;

  let pg;
  pg = p5.createGraphics(ORIGINAL_TILE_SIZE + 2, ORIGINAL_TILE_SIZE + 2);

  pg.strokeWeight(BASE_WEIGHT);
  pg.strokeCap(p5.ROUND);

  if (artMode == 'round') {
    pg.noFill();
    pg.stroke('255');
  } else {
    pg.fill(255);
    pg.noStroke();
  }

  pg.arc(0, 0, pg.width, pg.height, 0, p5.PI / 2);
  pg.arc(pg.width, pg.height, pg.width, pg.height, p5.PI, p5.PI + p5.PI / 2);

  if (showGridLines) {
    pg.noFill();
    pg.stroke(lightBg);
    pg.strokeWeight(BASE_WEIGHT * 0.25);
    pg.strokeCap(p5.ROUND);
    pg.square(0, 0, pg.height);
    p5.noStroke();
  }

  return pg;
}

export const sketch: Sketch<MySketchProps> = (p5) => {
  let inputValues = defaultInputValues;

  p5.updateWithProps = (props) => {
    inputValues = props;

    if (inputValues?.isSavingImage) {
      p5.saveCanvas('sketch', 'jpg');
    }
    // redraw canvas when props change to bypass the noLoop() behavior in the draw function
    p5.redraw();
  };

  p5.setup = () => {
    const { height, width } = computeCanvasDimensions(
      p5.windowWidth,
      p5.windowHeight
    );
    p5.frameRate(10);
    p5.createCanvas(width, height);
    p5.imageMode(p5.CENTER);
    p5.textFont('Pixelify Sans Variable');
  };

  p5.windowResized = () => {
    const { width, height } = computeCanvasDimensions(
      p5.windowWidth,
      p5.windowHeight
    );
    p5.resizeCanvas(width, height);
  };

  p5.draw = () => {
    const { colors, isAnimated, name, showBanner } = inputValues;
    const { bgColor } = colors;

    p5.background(bgColor);
    p5.clear();

    if (!isAnimated) {
      p5.randomSeed(convertStringToSeedNumber(name));
      p5.noLoop();
    } else {
      if (!p5.isLooping()) {
        p5.loop();
      }
    }

    drawTiles(p5 as P5CanvasInstance, p5.width, p5.height, inputValues);

    if (showBanner) {
      drawBanner(p5 as P5CanvasInstance, p5.width, inputValues);
    }
  };
};
